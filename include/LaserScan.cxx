// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file LaserScan.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "LaserScan.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

commander_robot_msg::LaserScan::LaserScan()
{


    m_angle_min = 0.0;

    m_angle_max = 0.0;

    m_angle_increment = 0.0;

    m_time_increment = 0.0;

    m_scan_time = 0.0;

    m_range_min = 0.0;

    m_range_max = 0.0;




}

commander_robot_msg::LaserScan::~LaserScan()
{
}

commander_robot_msg::LaserScan::LaserScan(const LaserScan &x)
{
    m_timestamp = x.m_timestamp;
    m_frame_id = x.m_frame_id;
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_time_increment = x.m_time_increment;
    m_scan_time = x.m_scan_time;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_ranges = x.m_ranges;
    m_intensities = x.m_intensities;
}

commander_robot_msg::LaserScan::LaserScan(LaserScan &&x)
{
    m_timestamp = std::move(x.m_timestamp);
    m_frame_id = std::move(x.m_frame_id);
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_time_increment = x.m_time_increment;
    m_scan_time = x.m_scan_time;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_ranges = std::move(x.m_ranges);
    m_intensities = std::move(x.m_intensities);
}

commander_robot_msg::LaserScan& commander_robot_msg::LaserScan::operator=(const LaserScan &x)
{
    m_timestamp = x.m_timestamp;
    m_frame_id = x.m_frame_id;
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_time_increment = x.m_time_increment;
    m_scan_time = x.m_scan_time;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_ranges = x.m_ranges;
    m_intensities = x.m_intensities;

    return *this;
}

commander_robot_msg::LaserScan& commander_robot_msg::LaserScan::operator=(LaserScan &&x)
{
    m_timestamp = std::move(x.m_timestamp);
    m_frame_id = std::move(x.m_frame_id);
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_time_increment = x.m_time_increment;
    m_scan_time = x.m_scan_time;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_ranges = std::move(x.m_ranges);
    m_intensities = std::move(x.m_intensities);

    return *this;
}

size_t commander_robot_msg::LaserScan::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += commander_robot_msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (1500 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (1500 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

size_t commander_robot_msg::LaserScan::getCdrSerializedSize(const commander_robot_msg::LaserScan& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += commander_robot_msg::Time::getCdrSerializedSize(data.timestamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.ranges().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.intensities().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

void commander_robot_msg::LaserScan::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_timestamp;
    scdr << m_frame_id;
    scdr << m_angle_min;
    scdr << m_angle_max;
    scdr << m_angle_increment;
    scdr << m_time_increment;
    scdr << m_scan_time;
    scdr << m_range_min;
    scdr << m_range_max;
    scdr << m_ranges;
    scdr << m_intensities;
}

void commander_robot_msg::LaserScan::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_timestamp;
    dcdr >> m_frame_id;
    dcdr >> m_angle_min;
    dcdr >> m_angle_max;
    dcdr >> m_angle_increment;
    dcdr >> m_time_increment;
    dcdr >> m_scan_time;
    dcdr >> m_range_min;
    dcdr >> m_range_max;
    dcdr >> m_ranges;
    dcdr >> m_intensities;
}

size_t commander_robot_msg::LaserScan::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            












    return current_align;
}

bool commander_robot_msg::LaserScan::isKeyDefined()
{
    return false;
}

void commander_robot_msg::LaserScan::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}
